"use client";

import { useState, useCallback } from "react";
import { toast } from "sonner";
import {
  ContentRepairRequest,
  ContentRepairResult,
  ContentRepairState,
} from "../(_types)/content-repair-types";
import {
  ContentRepairServerRequest,
  repairContentStructureAction,
} from "../(_actions)/content-repair-action";

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Custom hook –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ContentStructure JSON —Å –ø–æ–º–æ—â—å—é streamObject
 */
export function useContentRepair() {
  const [repairState, setRepairState] = useState<ContentRepairState>({
    isRepairing: false,
    repairResult: null,
    showRepairTool: false,
    repairAttempts: 0,
  });

  /**
   * ‚úÖ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ContentStructure —á–µ—Ä–µ–∑ streamObject Server Action
   */
  const repairContentWithServer = useCallback(
    async (request: ContentRepairRequest): Promise<ContentRepairResult> => {
      console.log("üîß Client: Starting ContentStructure STREAM repair:", {
        originalLength: request.invalidJsonString.length,
        pageName: request.pageName,
        attempt: repairState.repairAttempts + 1,
      });

      try {
        const serverRequest: ContentRepairServerRequest = {
          invalidJsonString: request.invalidJsonString,
          pageName: request.pageName,
          pageSlug: request.pageSlug,
        };

        console.log(
          "üîß Client: Calling ContentStructure STREAM Server Action..."
        );

        // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π streamObject action
        const serverResult = await repairContentStructureAction(
          serverRequest,
          repairState.repairAttempts + 1
        );

        console.log(
          "‚úÖ Client: ContentStructure STREAM Server Action response:",
          {
            success: serverResult.success,
            confidence: serverResult.confidence,
            elementsCount: Array.isArray(serverResult.repairedData)
              ? serverResult.repairedData.length
              : 0,
          }
        );

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º "openai" –Ω–∞ "openai-stream"
        const result: ContentRepairResult = {
          success: serverResult.success,
          repairedData: serverResult.repairedData,
          error: serverResult.error,
          repairMethod: "openai-stream", // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
          originalLength: serverResult.originalLength,
          repairedLength: serverResult.repairedLength,
          confidence: serverResult.confidence,
        };

        return result;
      } catch (error) {
        console.error(
          "‚ùå Client: ContentStructure STREAM Server Action call failed:",
          error
        );

        const errorMessage =
          error instanceof Error
            ? `StreamObject Server Action Error: ${error.message}`
            : "ContentStructure JSON stream repair request failed";

        return {
          success: false,
          error: errorMessage,
          repairMethod: "openai-stream", // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
          originalLength: request.invalidJsonString.length,
          repairedLength: 0,
          confidence: 0,
        };
      }
    },
    [repairState.repairAttempts]
  );

  /**
   * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è streamObject
   */
  const repairInvalidContentStructure = useCallback(
    async (request: ContentRepairRequest): Promise<ContentRepairResult> => {
      console.log("üîß Client: repairInvalidContentStructure called (STREAM):", {
        pageName: request.pageName,
        currentAttempts: repairState.repairAttempts,
        maxAttempts: 3,
      });

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
      if (repairState.repairAttempts >= 3) {
        console.warn(
          "‚ö†Ô∏è Client: Maximum ContentStructure STREAM repair attempts reached"
        );
        return {
          success: false,
          error: "Maximum stream repair attempts reached",
          repairMethod: "none",
          originalLength: request.invalidJsonString.length,
          repairedLength: 0,
          confidence: 0,
        };
      }

      setRepairState((prev) => ({
        ...prev,
        isRepairing: true,
        repairAttempts: prev.repairAttempts + 1,
      }));

      try {
        const result = await repairContentWithServer(request);

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è streamObject —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (result.success && result.confidence < 0.6) {
          console.warn(
            "‚ö†Ô∏è Client: ContentStructure STREAM repair confidence below threshold:",
            result.confidence
          );
          toast.warning(
            `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ContentStructure (Stream) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é: ${Math.round(result.confidence * 100)}%`
          );
        }

        setRepairState((prev) => ({
          ...prev,
          isRepairing: false,
          repairResult: result,
        }));

        if (result.success) {
          const elementsCount = Array.isArray(result.repairedData)
            ? result.repairedData.length
            : 0;
          toast.success(
            "ContentStructure —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é Stream –ò–ò",
            {
              description: `${elementsCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(result.confidence * 100)}%`,
            }
          );
        } else {
          toast.error(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É ContentStructure (Stream)",
            {
              description: result.error,
            }
          );
        }

        return result;
      } catch (error) {
        console.error(
          "‚ùå Client: Unexpected error in repairInvalidContentStructure (STREAM):",
          error
        );

        const result: ContentRepairResult = {
          success: false,
          error:
            error instanceof Error
              ? error.message
              : "ContentStructure JSON stream repair failed",
          repairMethod: "none",
          originalLength: request.invalidJsonString.length,
          repairedLength: 0,
          confidence: 0,
        };

        setRepairState((prev) => ({
          ...prev,
          isRepairing: false,
          repairResult: result,
        }));

        return result;
      }
    },
    [repairState.repairAttempts, repairContentWithServer]
  );

  /**
   * ‚úÖ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const resetRepairState = useCallback(() => {
    console.log("üîÑ Client: Resetting ContentStructure STREAM repair state");
    setRepairState({
      isRepairing: false,
      repairResult: null,
      showRepairTool: false,
      repairAttempts: 0,
    });
  }, []);

  /**
   * ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const toggleRepairTool = useCallback(() => {
    setRepairState((prev) => ({
      ...prev,
      showRepairTool: !prev.showRepairTool,
    }));
  }, []);

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô return –æ–±—ä–µ–∫—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π streamObject
  return {
    repairState,
    repairInvalidContentStructure, // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    repairContentWithServer, // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ server action
    resetRepairState,
    toggleRepairTool,
    isRepairing: repairState.isRepairing,
    canRepair: repairState.repairAttempts < 3,
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø
    repairMethod: "openai-stream" as const, // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è streamObject
  };
}
