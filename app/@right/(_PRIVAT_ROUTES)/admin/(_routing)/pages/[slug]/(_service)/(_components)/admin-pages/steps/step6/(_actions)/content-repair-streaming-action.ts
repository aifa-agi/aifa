// @/app/@right/(_PRIVAT_ROUTES)/admin/(_routing)/pages/[slug]/(_service)/(_components)/admin-pages/steps/step6/(_actions)/content-repair-streaming-action.ts

"use server";

import { streamObject } from "ai";
import { openai } from "@ai-sdk/openai";
import { z } from "zod";
import { createStreamableValue } from "ai/rsc";
import {
  RootContentStructureType,
  calculateContentRepairConfidence,
  autoFixH2Compliance,
} from "../(_utils)/content-repair-helpers";

/**
 * ‚úÖ STREAMING: Request interface
 */
export interface StreamingContentRepairRequest {
  invalidJsonString: string;
  pageName: string;
  pageSlug: string;
  expectedStructureType?: "root" | "nested";
}

/**
 * ‚úÖ STREAMING: Response chunk interface
 */
export interface StreamingRepairChunk {
  type: "progress" | "element" | "complete" | "error";
  data?: any;
  element?: RootContentStructureType;
  progress?: number;
  stage?: string;
  error?: string;
  final?: {
    elements: RootContentStructureType[];
    totalCount: number;
    confidence: number;
    hierarchyCompliance: {
      isH2Compliant: boolean;
      violationsFixed: number;
      rootElementsCount: number;
      h2ElementsCount: number;
    };
  };
  timestamp: number;
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê –°–•–ï–ú–ê: –ì–∏–±–∫–∞—è —Å—Ö–µ–º–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const StreamingRootElementSchema = z.object({
  id: z.string().optional(),
  classification: z.enum(["semantic", "technical", "hybrid"]).optional(),
  tag: z.string().default("h2"), // ‚úÖ –ì–∏–±–∫–∏–π tag, –∏—Å–ø—Ä–∞–≤–∏–º –ø–æ—Ç–æ–º
  keywords: z.array(z.string()).optional().default([]),
  intent: z.string().optional(),
  taxonomy: z.string().optional(),
  attention: z.string().optional(),
  audiences: z.string().optional(),
  selfPrompt: z.string().optional(),
  designDescription: z.string().optional(),
  connectedDesignSectionId: z.string().optional(),
  linksToSource: z.array(z.string()).optional().default([]),
  additionalData: z.object({
    minWords: z.number().min(10).default(100),
    maxWords: z.number().min(20).default(300),
    actualContent: z.string().min(5),
    position: z
      .object({
        order: z.number().optional(),
        depth: z.number().optional(),
        parentTag: z.string().optional(), // ‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É, –∏—Å–ø—Ä–∞–≤–∏–º –ø–æ—Ç–æ–º
      })
      .optional(),
  }),
  realContentStructure: z.array(z.any()).optional().default([]),
});

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ position –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è RootContentStructureType
 */
function fixPositionForRootElement(
  position: any
): { order?: number; depth?: number; parentTag?: "h1" } | undefined {
  if (!position || typeof position !== "object") {
    return undefined;
  }

  const fixedPosition: { order?: number; depth?: number; parentTag?: "h1" } =
    {};

  // –ö–æ–ø–∏—Ä—É–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è
  if (typeof position.order === "number") {
    fixedPosition.order = position.order;
  }
  if (typeof position.depth === "number") {
    fixedPosition.depth = position.depth;
  }

  // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º parentTag: —Ç–æ–ª—å–∫–æ "h1" —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  if (position.parentTag === "h1") {
    fixedPosition.parentTag = "h1";
  }
  // –ï—Å–ª–∏ parentTag –Ω–µ "h1", –ø—Ä–æ—Å—Ç–æ –Ω–µ –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ

  return Object.keys(fixedPosition).length > 0 ? fixedPosition : undefined;
}

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –î–ï–ô–°–¢–í–ò–ï: –†–µ–∞–ª—å–Ω–æ–µ H2-compliant –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export async function streamContentStructureRepair(
  request: StreamingContentRepairRequest
) {
  const stream = createStreamableValue<StreamingRepairChunk>();

  // ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
  (async () => {
    try {
      console.log("üöÄ STARTING STREAMING REPAIR");
      console.log("üìù Input length:", request.invalidJsonString.length);
      console.log("üìù Page:", request.pageName);
      console.log("üìù Slug:", request.pageSlug);

      // ‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      stream.update({
        type: "progress",
        progress: 0,
        stage: "Initializing H2-compliant streaming repair...",
        timestamp: Date.now(),
      });

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢: –ë–æ–ª–µ–µ —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const streamingPrompt = `You are an expert content structure generator. Your task is to create H2-compliant content sections.

CRITICAL REQUIREMENTS:
- Generate 3-5 meaningful H2 sections
- Each section must have substantial content (not placeholders)
- All sections should be relevant to: "${request.pageName}"

EXACT OUTPUT FORMAT REQUIRED:
Each element must be a complete H2 section with:
- tag: "h2" (exactly this string)
- additionalData.actualContent: Real, meaningful content (minimum 50 words)
- additionalData.minWords: Realistic minimum word count (50-200)
- additionalData.maxWords: Realistic maximum word count (150-500)
- keywords: Array of relevant SEO keywords
- intent: Clear purpose of this section
- taxonomy: Section category/type

CONTENT CONTEXT:
Page Name: ${request.pageName}
Page Slug: ${request.pageSlug}
Source Data: ${request.invalidJsonString.substring(0, 500)}...

EXAMPLE SECTION:
{
  "tag": "h2",
  "keywords": ["introduction", "overview", "getting started"],
  "intent": "Introduce readers to the main topic and set expectations",
  "taxonomy": "Introduction Section",
  "audiences": "General audience",
  "additionalData": {
    "minWords": 120,
    "maxWords": 250,
    "actualContent": "This comprehensive introduction to ${request.pageName} provides readers with essential background information and context. We'll explore the key concepts, benefits, and practical applications that make this topic relevant to your needs. By the end of this section, you'll have a clear understanding of what to expect and why this information matters."
  }
}

Generate 3-5 similar sections, each with unique, substantial content.`;

      // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      stream.update({
        type: "progress",
        progress: 15,
        stage: "Connecting to OpenAI with enhanced prompt...",
        timestamp: Date.now(),
      });

      console.log("üéØ PROMPT PREPARED, LENGTH:", streamingPrompt.length);

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const { elementStream, usage } = streamObject({
        model: openai("gpt-4o"),
        output: "array",
        schema: StreamingRootElementSchema,
        prompt: streamingPrompt,
        temperature: 0.2, // ‚úÖ –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
        maxTokens: 60000, // ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      });

      const collectedElements: RootContentStructureType[] = [];
      let elementCount = 0;

      // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      stream.update({
        type: "progress",
        progress: 25,
        stage: "Streaming H2 elements in real-time...",
        timestamp: Date.now(),
      });

      console.log("üîÑ STARTING ELEMENT STREAM PROCESSING");

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–¢–û–ö–ê: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      try {
        for await (const element of elementStream) {
          elementCount++;
          console.log(`‚úÖ ELEMENT ${elementCount} RECEIVED:`, {
            tag: element.tag,
            hasContent: !!element.additionalData?.actualContent,
            contentLength: element.additionalData?.actualContent?.length || 0,
          });

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ validElement —Å —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
          const originalAdditionalData = element.additionalData || {};

          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º position –æ—Ç–¥–µ–ª—å–Ω–æ
          const fixedPosition = fixPositionForRootElement(
            originalAdditionalData.position
          );

          // ‚úÖ –°–æ–∑–¥–∞–µ–º additionalData –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ç–∏–ø–æ–≤
          const fixedAdditionalData: RootContentStructureType["additionalData"] =
            {
              minWords: Math.max(originalAdditionalData.minWords || 100, 50),
              maxWords: Math.max(originalAdditionalData.maxWords || 250, 150),
              actualContent:
                originalAdditionalData.actualContent ||
                `Generated H2 section ${elementCount} content for ${request.pageName}. This section provides comprehensive information about the topic and includes relevant details that help readers understand the key concepts and practical applications.`,
              // ‚úÖ position –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏ —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ
              ...(fixedPosition && { position: fixedPosition }),
            };

          // ‚úÖ –°–æ–∑–¥–∞–µ–º validElement –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ç–∏–ø–æ–≤
          const validElement: RootContentStructureType = {
            id: element.id,
            classification: element.classification,
            tag: "h2", // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ H2
            keywords: element.keywords || [
              `section-${elementCount}`,
              request.pageSlug,
            ],
            intent:
              element.intent ||
              `Provide information about section ${elementCount}`,
            taxonomy: element.taxonomy || `Section ${elementCount}`,
            attention: element.attention,
            audiences: element.audiences || "General audience",
            selfPrompt: element.selfPrompt,
            designDescription: element.designDescription,
            connectedDesignSectionId: element.connectedDesignSectionId,
            linksToSource: element.linksToSource || [],
            additionalData: fixedAdditionalData,
            realContentStructure: element.realContentStructure || [],
          };

          collectedElements.push(validElement);

          // ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
          stream.update({
            type: "element",
            element: validElement,
            progress: Math.min(25 + elementCount * 15, 85),
            stage: `Generated H2 section ${elementCount}: ${validElement.additionalData.actualContent.substring(0, 50)}...`,
            timestamp: Date.now(),
          });

          // ‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          if (elementCount >= 7) {
            console.warn("‚ö†Ô∏è Maximum elements reached, stopping stream");
            break;
          }
        }
      } catch (streamError) {
        console.error("‚ùå ERROR IN ELEMENT STREAM:", streamError);
        throw streamError;
      }

      console.log(
        `üìä STREAM PROCESSING COMPLETE: ${collectedElements.length} elements`
      );

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù FALLBACK: –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
      if (collectedElements.length === 0) {
        console.warn("‚ö†Ô∏è NO ELEMENTS GENERATED, CREATING FALLBACK");

        const fallbackElements: RootContentStructureType[] = [
          {
            tag: "h2",
            keywords: ["introduction", "overview"],
            intent: "Introduce the main topic",
            taxonomy: "Introduction",
            audiences: "General audience",
            additionalData: {
              minWords: 120,
              maxWords: 250,
              actualContent: `Welcome to ${request.pageName}. This comprehensive guide introduces you to the essential concepts and provides a thorough overview of what you need to know. We'll cover the fundamental principles, key benefits, and practical applications that make this topic valuable for your understanding and implementation.`,
            },
          },
          {
            tag: "h2",
            keywords: ["main content", "detailed information"],
            intent: "Provide detailed information",
            taxonomy: "Main Content",
            audiences: "General audience",
            additionalData: {
              minWords: 200,
              maxWords: 400,
              actualContent: `This section delves deep into the core aspects of ${request.pageName}. Here you'll find detailed explanations, practical examples, and actionable insights that form the foundation of understanding. We explore various approaches, methodologies, and best practices that have proven effective. The information presented here builds upon the introduction and provides the substance you need to move forward with confidence and clarity.`,
            },
          },
          {
            tag: "h2",
            keywords: ["conclusion", "summary", "next steps"],
            intent: "Summarize key points and provide next steps",
            taxonomy: "Conclusion",
            audiences: "General audience",
            additionalData: {
              minWords: 100,
              maxWords: 200,
              actualContent: `In conclusion, ${request.pageName} offers significant value through the concepts and practices we've explored. The key takeaways include understanding the fundamental principles, applying best practices, and implementing the strategies discussed. Moving forward, you can use this knowledge to achieve your objectives and continue learning in this area.`,
            },
          },
        ];

        collectedElements.push(...fallbackElements);

        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å fallback —ç–ª–µ–º–µ–Ω—Ç—ã
        fallbackElements.forEach((element, index) => {
          stream.update({
            type: "element",
            element,
            progress: Math.min(50 + index * 10, 80),
            stage: `Created fallback H2 section ${index + 1}`,
            timestamp: Date.now(),
          });
        });
      }

      // ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
      stream.update({
        type: "progress",
        progress: 90,
        stage: "Applying final H2 compliance validation...",
        timestamp: Date.now(),
      });

      // ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è H2
      let finalElements = collectedElements;
      let violationsFixed = 0;

      finalElements.forEach((element) => {
        if (element.tag !== "h2") {
          element.tag = "h2";
          violationsFixed++;
        }
      });

      // ‚úÖ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      const confidence = calculateContentRepairConfidence(
        finalElements,
        request.invalidJsonString
      );

      console.log(
        `üéâ FINAL RESULT: ${finalElements.length} elements, confidence: ${confidence}`
      );

      // ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      stream.done({
        type: "complete",
        final: {
          elements: finalElements,
          totalCount: finalElements.length,
          confidence,
          hierarchyCompliance: {
            isH2Compliant: finalElements.every((el) => el.tag === "h2"),
            violationsFixed,
            rootElementsCount: finalElements.length,
            h2ElementsCount: finalElements.filter((el) => el.tag === "h2")
              .length,
          },
        },
        progress: 100,
        stage: `‚úÖ Streaming complete: ${finalElements.length} H2-compliant sections generated`,
        timestamp: Date.now(),
      });
    } catch (error) {
      console.error("‚ùå STREAMING ERROR:", error);

      // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage =
        error instanceof Error
          ? `Streaming repair error: ${error.message}`
          : "Unknown streaming error occurred";

      stream.done({
        type: "error",
        error: errorMessage,
        progress: 0,
        stage: "Streaming repair failed",
        timestamp: Date.now(),
      });
    }
  })();

  return {
    stream: stream.value,
    streamId: `repair-${Date.now()}`,
  };
}

/**
 * ‚úÖ –£–¢–ò–õ–ò–¢–ê: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–æ—Ä–º–∞—Ç
 */
export async function convertStreamingResultToLegacy(
  streamingResult: StreamingRepairChunk["final"]
) {
  if (!streamingResult) {
    throw new Error("No streaming result to convert");
  }

  return {
    success: true,
    repairedData: streamingResult.elements,
    originalLength: 0, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—ã–∑—ã–≤–∞—é—â–∏–º
    repairedLength: JSON.stringify(streamingResult.elements).length,
    confidence: streamingResult.confidence,
    repairMethod: "stream-object" as const,
    hierarchyCompliance: streamingResult.hierarchyCompliance,
    performanceMetrics: {
      streamingTime: 0, // –ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      validationTime: 0,
      totalTime: 0,
    },
  };
}
